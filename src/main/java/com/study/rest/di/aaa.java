package com.study.rest.di;

public class aaa {

//    ioc란?
//    제어의 역전이다.
//    메소드나 객체의 호출작업을 개발자가 결정하는 것이 아니라, 외부에서 결정되는 것을 의미한다.
//
//    기존에는 다음과 순서로 객체가 만들어지고 실행되었다.
//
//            1. 객체 생성
//
//    class A {                  class B {
//        private B b = new B(); (2)         void bCall() {
//            sout("B 객체에서 메소드 호출");
//            void cCall() {               }
//            b.bCall(); (3)
//        }
//    }
//
//2. 의존성 객체 생성
//        클래스 내부에서 생성
//
//3. 의존성 객체 메소드 호출
//
//        하지만 스프링에서는 다음과 같은 순서로 객체가 만들어지고 실행된다.
//
//                1. 객체 생성
//
//        class C {                  class D {
//            @Autowired               void dCall() {
//                private D d;    (2)                  sout("D 객체에서 메소드 호출");
//                D 객체에서 메소드 호출            }
//            void cCall() {
//                d.dCall(); (3)
//            }
//        }
//
//2. 의존성 객체 주입
//            스스로가 만드는것이 아니라 제어권을 스프링에게 주어 스프링이 만들어놓은 객체를 주입한다.
//            객체가 스프링 컨테이너에게 관리되고 있는 bean이라면 @Autowired를 통해 객체를 주입받을 수 있게 된다.
//
//            이떄 bean이란?
//            객체를 Bean이라고 부르며, 프로젝트가 실행될때 사용자가 Bean으로 관리하는 객체들의 생성과 소멸에 관련된 작업을 자동적으로 수행해주는데 객체가 생성되는 곳을 스프링에서는 컨테이너라고 부른다.
//
//                    3. 의존성 객체 메소드 호출 -> d.dCall();

        }
